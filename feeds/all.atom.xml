<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>H.B.Zhou's blog</title><link href="http://tonyzhou.github.io/" rel="alternate"></link><link href="http://tonyzhou.github.io/feeds/all.atom.xml" rel="self"></link><id>http://tonyzhou.github.io/</id><updated>2013-09-02T09:17:00+08:00</updated><entry><title>understand iOS code signing</title><link href="http://tonyzhou.github.io/posts/2013/09/02/understand-iOS-code-signing" rel="alternate"></link><updated>2013-09-02T09:17:00+08:00</updated><author><name>Tony Zhou</name></author><id>tag:tonyzhou.github.io,2013-09-02:posts/2013/09/02/understand-iOS-code-signing</id><summary type="html">&lt;p&gt;用iOS模拟器调试App是一件容易的事情，可是当你要放到iPhone或者iPad时运行应用时，就需要额外做很多事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请一个iOS开发者帐户（iOS developer program）&lt;/li&gt;
&lt;li&gt;生成一个development／Distribution Certificate&lt;/li&gt;
&lt;li&gt;在开发者帐户中添加AppID， 添加devices&lt;/li&gt;
&lt;li&gt;生成一个provision文件&lt;/li&gt;
&lt;li&gt;在Xcode中，对project的code signing identity作正确的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;iOS developer Program&lt;/h2&gt;
&lt;p&gt;iOS developer program分成三种：iOS developer （Standard） program（以下简称iDP）、iOS developer Enterprise Program（以下简称iDEP）和iOS developer University Program。 IDP用于以个人或者公司的身份在Appstore上开发应用；iDEP用于in-house App的开发， in-house的App不能上Appstore，只能在组织内进行分发；iOS developer University Program用于高等院校将iOS开发引入课程。注意，不要把以公司身份申请的iDP和iDEP混淆。 iDP可以用个人身份申请，也可以以公司身份申请，两者在申请时提供的资料不一样，个人的iDP不能添加子帐户，而公司的IDP可以添加子帐户，但是它们都可以把应用发布到Appstore上面，费用都是99刀，可以ad hoc部署设备都只有100台。 而iDEP可以部署的设备是无限的，唯独不能发布应用到Appstore中，一年的费用是299刀。 &lt;/p&gt;
&lt;h2&gt;Development certificate 和 distribute certificate&lt;/h2&gt;
&lt;p&gt;Certificate就是一个证书，关于证书有何用处，阮一峰有一篇&lt;a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html"&gt;blog&lt;/a&gt;，非常浅显易懂。简要的说，证书=公钥+元数据+签名。和公钥配对的私钥是保密的，私钥被存放在钥匙串应用程序中（可导出为.p12文件，迁移到其他机器上）；公钥要和元数据一起，发往证书颁发机构（CA），由CA签名之后，生存一份有效的证书，证书是公开的，在provisioning profile文件中一般会有证书的副本。&lt;/p&gt;
&lt;p&gt;生成证书的具体过程是这样的： 首先我们用钥匙串应用生成一个证书请求文件（Certificate request）。在生成证书请求文件的过程中，我们就已经产生了一对密钥，私钥放在本地，公钥+一部分元数据被放到了证书请求文件中。证书颁发机构接收到证书请求文件之后，用它自己的私钥对其进行签名，返回一个有效证书。 我们要把这个证书再添加到钥匙串应用中，使它和之前的私钥进行配对。&lt;/p&gt;
&lt;p&gt;为什么真机测试需要用到证书和密钥？ 因为iOS只允许来源可信的应用程序在其操作系统上运行。 每个App需要有一个苹果颁发的证书，确保它不是来源不明的应用；在安装的过程中，iOS还要验证App的可执行文件以及其他资源的数字签名，确保它们没有受到恶意修改。&lt;/p&gt;
&lt;p&gt;真机测试涉及到的certificate有两种：development certificate和distribution certificate， development certificate可以建立多个副本， 而distribution certificate只能建立一个副本，所以如果要在另外一台Mac机器上共用distribution certificate，就只能在原先的机器上把密钥导出，再将其导入新机器的钥匙串应用程序中。 distribution certificate除了用于AppStore发布，还主要被用作beta测试，因为它能使用ad hoc部署的方式将应用安装到目标机器上。&lt;/p&gt;
&lt;h2&gt;App ID和Device UDID&lt;/h2&gt;
&lt;p&gt;App ID 就是一个应用的application identifier，在developer program页面，可以建立两种App ID，一种是明确（explicit）的，比如com.example.myapp; 一种是基于通配符（wildcard）的，比如&lt;em&gt;和com.example.&lt;/em&gt;，如果应用涉及到推送通知和应用内购买，则必须使用explicit的AppID。在创建provision profile时，我们还需要选择这个App ID，因此，它必须和xcode中identifier的配置一样。&lt;/p&gt;
&lt;p&gt;Device UDID用于标识一台苹果设备，provisioning profile中必须指出这个应用要部署在哪几台设备上，这些设备是通过UDID唯一标识的。 一个开发者账户能添加的设备最多只有100台，若要在某台机器上测试刚开发的应用，必须先将这台设备的UDID添加到iDP中。&lt;/p&gt;
&lt;h2&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Provisioning profile包含了以上谈论的各种配置信息: 证书，App ID，设备UDIDs，可以用文本编辑器打开~/Library/MobileDevice/Provisioning Profiles下的.mobileprovision文件查看具体内容。xcode在编译产生app bundle时，会将对应的mobileprovision文件拷贝到bundle中，文件名是embedded.mobileprovision， 通过diff命令比较embedded.mobileprovision和provision profiles下的mobileprovision文件可以发现，除了文件名不同，文件内容都是一样的。注意，不能自己随意的修改这个mobileprovision文件，每次添加设备后，必须从iDP网站上同步最新的provision文件，因为该文件必须经过Apple的数字签名，无法随意伪造。&lt;/p&gt;
&lt;h2&gt;Code Sign过程&lt;/h2&gt;
&lt;p&gt;准备好上述的各种文件之后，我们要在xcode中为target制定code sign identity，code sign就是利用私钥对app bundle中的文件生成一段数字签名，并将数字签名附在bundle中，code sign有两个作用：1. 确保可执行文件的来源可靠， 2. 确保可执行文件没有遭到恶意修改。 苹果在xcode命令行工具中附带了一个命令codesign，可以用man codesign命令查看其具体用法。&lt;/p&gt;
&lt;p&gt;附录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apple document: &lt;a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/CodeSigningYourApps/CodeSigningYourApps.html"&gt;code signing your Apps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apple document: &lt;a href="https://developer.apple.com/library/mac/documentation/security/conceptual/CodeSigningGuide/Introduction/Introduction.html"&gt;code signing guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ray Wenderlich: &lt;a href="http://www.raywenderlich.com/2915/ios-code-signing-under-the-hood"&gt;iOS code signing under the hood&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wikipedia: &lt;a href="http://en.wikipedia.org/wiki/Code_signing"&gt;code signing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS X Manpage:&lt;a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/codesign.1.html"&gt;codesign&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="iOS"></category><category term="cocoa"></category><category term="deploy"></category></entry><entry><title>Python with语句和context manager</title><link href="http://tonyzhou.github.io/posts/2013/08/07/python%20with%20statement%20and%20context%20manager" rel="alternate"></link><updated>2013-08-07T16:57:00+08:00</updated><author><name>Tony Zhou</name></author><id>tag:tonyzhou.github.io,2013-08-07:posts/2013/08/07/python with statement and context manager</id><summary type="html">&lt;h2&gt;Python with语句的引入&lt;/h2&gt;
&lt;p&gt;资源管理是编码的一大话题， 很多语言都有专门的特性用于保证资源的合理创建和释放。比如利用C++的确定性析构， 封装一个RAII对象： 用对象的生命周期来控制资源的释放。关于RAII，详细的介绍请见：http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization&lt;/p&gt;
&lt;p&gt;对Python来说，管理资源分配和释放常用的做法有try/finally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tear&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;try/finally块经常出现在编码中，因此有必要考虑复用这部分功能，可以用一个函数封装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;controlled_execution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tear&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;

&lt;span class="n"&gt;controlled_execution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种封装方式有很多弊端： 执行体(do something部分)被放在一个函数中，作用域被隔离了，不能使用当前作用域的局部变量， 非常不方便。 进一步优化，可以利用python的generator解决作用域隔离问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;controlled_execution&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tear&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;controlled_execution&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样做虽然解决了问题，但看起来还是非常怪异，因为执行体(do something部分)只需要执行一次，我们却把它放入一个循环中，这样不利于代码的理解。
对此，python2.5中引入了新特性——context manager 和 with statement， 使用类去封装资源的分配和释放操作，用with语句去划定资源的生存范围。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;controlled_execution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tear&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;controlled_execution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with的执行流程是这样的： 每次执行controller_execution，会返回一个对象，这个对象被赋给thing，with语句会对thing自动执行一次__enter__，在with区块执行完毕之后，&lt;strong&gt;exit__也会被自动调用。因此能保证资源的合理初始化和释放。
在这里，thing对象被称作context managers， 它代表了with块运行时上下文信息。controller_execution类被称作context manager class，它必须实现__enter&lt;/strong&gt;/__exit__函数对(context manager protocol)。&lt;/p&gt;
&lt;h2&gt;更多用法&lt;/h2&gt;
&lt;p&gt;除了context manager protocol， python还提供了contextlib，这是一种更简单的定义context manager的方法，具体用法请查看：http://docs.python.org/2/library/contextlib.html#module-contextlib&lt;/p&gt;
&lt;h2&gt;附录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;effbot博客——&lt;a href="http://effbot.org/zone/python-with-statement.htm"&gt;理解pythonwith语句&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PEP343——&lt;a href="http://www.python.org/dev/peps/pep-0343/"&gt;with语句&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python &lt;a href="http://docs.python.org/2/library/contextlib.html#module-contextlib"&gt;contextlib文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category></entry><entry><title>Python格式化输出</title><link href="http://tonyzhou.github.io/posts/2013/08/01/python-output-format" rel="alternate"></link><updated>2013-08-01T16:57:00+08:00</updated><author><name>Tony Zhou</name></author><id>tag:tonyzhou.github.io,2013-08-01:posts/2013/08/01/python-output-format</id><summary type="html">&lt;p&gt;从2.6版本开始，Python引入了一种新的格式化输出字符串的方式：string.format，这种格式化方式和老的%tuple方式有所不同。 有了这个string.format，我们能更灵活的输出格式化字符串。&lt;/p&gt;
&lt;h2&gt;string.format使用方式&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0} and {1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;eggs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{0}和{1}在这里被称作replacement_field，replacement_field在输出时候会被替换成指定的参数，除了{number}，replacement_field还支持更加复杂的用法，它的详细语法格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;replacement_field&lt;/span&gt; &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;conversion&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;format_spec&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;field_name&lt;/span&gt;        &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;arg_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;attribute_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;element_index&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;arg_name&lt;/span&gt;          &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;attribute_name&lt;/span&gt;    &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="n"&gt;identifier&lt;/span&gt;
&lt;span class="n"&gt;element_index&lt;/span&gt;     &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;index_string&lt;/span&gt;
&lt;span class="n"&gt;index_string&lt;/span&gt;      &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="n"&gt;conversion&lt;/span&gt;        &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;format_spec&lt;/span&gt;       &lt;span class="o"&gt;::=&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;described&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;replacement_field必须被包围在"{}"中，任何在"{}"之外的字符串都会被直接输出，如果要输出"{", 必须使用转义“{{”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;field_name表示格式化参数的参数名，它可以是字典的key（当参数是一个dictionary），也可以是一个数字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conversion以!开头，表示格式化之前是否需要对参数进行强制转换，它支持三种形式的转换：!s-对参数调用str(), !r-对参数调用repr(),!a对参数调用ascii()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;format_spec以:开头，表示参数的输出格式，详细定义如下：&lt;/p&gt;
&lt;p&gt;format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]
fill        ::=  &amp;lt;a character other than '{' or '}'&gt;
align       ::=  "&amp;lt;" | "&amp;gt;" | "=" | "^"
sign        ::=  "+" | "-" | " "
width       ::=  integer
precision   ::=  integer
type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细的格式化输出例子，请见：http://docs.python.org/3/library/string.html#format-examples&lt;/p&gt;
&lt;p&gt;特别留意datetime的输出格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{:%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %H:%M:%S}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;2010-07-04 12:15:58&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;string.format对比%tuple&lt;/h2&gt;
&lt;p&gt;Python官方文档将string.format称为fancier output formatting, 毫无疑问string.format比%tuple花哨很多， 比如：&lt;/p&gt;
&lt;p&gt;string.format支持argment的reuse：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{0} {2} {1} {2} {3} {2} {4} {2}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;string.format是一个函数，可以在用作其它函数的参数，从而有更加灵活的用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="n"&gt;once_upon_a_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;once_upon_a_time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{:%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %H:%M:%S}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上例子均取自: http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format&lt;/p&gt;
&lt;p&gt;Python官方文档建议用string.format替换%tuple方式进行格式化输出，除非你要编写Python2.5及以下版本兼容的代码。&lt;/p&gt;</summary><category term="publishing"></category></entry><entry><title>用pelican搭建博客</title><link href="http://tonyzhou.github.io/posts/2013/07/11/build-your-blog-with-pelican" rel="alternate"></link><updated>2013-07-11T16:57:00+08:00</updated><author><name>Tony Zhou</name></author><id>tag:tonyzhou.github.io,2013-07-11:posts/2013/07/11/build-your-blog-with-pelican</id><summary type="html">&lt;p&gt;使用wordpress搭建博客网站是一种常规的做法，但也是一种浪费资源的做法。下面介绍如何使用静态博客生成器pelican搭建个人博客。&lt;/p&gt;
&lt;p&gt;如果使用wordpress，你往往需要做很多事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;购买一个免费的PHP+MYSQL托管主机&lt;/li&gt;
&lt;li&gt;购买一个域名&lt;/li&gt;
&lt;li&gt;将wordpress的代码传到主机空间&lt;/li&gt;
&lt;li&gt;配置数据库，配置主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wordpress的最大问题在于性能，在没有经过优化的情况下，每次访问一篇博客文章都要走HTTP
server，并运行一段PHP代码，读几次数据库. 换个角度来看，对更新并不频繁的博客站点来说，根本不需要如此复杂的过程，静态页面就能满足博客网站的需求。博客网站还是存在一部分“动态”的内容：评论，幸运的是我们有disqus评论系统来实现这一需求。&lt;/p&gt;
&lt;p&gt;静态博客生成器，在不同语言/平台有不同的实现。最常见的莫过于octopress，但它是用ruby语言开发的。作为对Python比较感兴趣的开发者，我选择用python写的pelican。&lt;/p&gt;
&lt;p&gt;博客网站的托管，这里有成本低效果好的方案——github pages，github官方也支持将github pages用作个人博客，对在博客上写技术文章的人来说，不必顾忌是否在滥用github。&lt;/p&gt;
&lt;h2&gt;pelican安装&lt;/h2&gt;
&lt;p&gt;Pelican的官方站点有关于快速启动的&lt;a href="http://docs.getpelican.com/en/latest/getting_started.html#installing-pelican"&gt;介绍&lt;/a&gt;，这里有两种安装方式：全局安装和在virtualenv下的安装，推荐使用后者。安装过程中需要用到&lt;a href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;和&lt;a href="http://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv ~/virtualenvs/pelican
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/virtualenvs/pelican
&lt;span class="nv"&gt;$ &lt;/span&gt;. bin/activate

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -e git://github.com/getpelican/pelican#egg&lt;span class="o"&gt;=&lt;/span&gt;pelican

&lt;span class="nv"&gt;$ &lt;/span&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用Pelican-quickstart产生示例网站&lt;/h2&gt;
&lt;p&gt;使用pelican-quickstart快速产生一个示例网站&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令运行过程中会提示你输入网站的参数，比如站点名称，是否支持ssh上传网站内容等；运行结束，当前目录下会产生如下的目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;yourproject&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;develop_server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Main&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;       &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;ready&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;content目录用于存放博客文章的markdown文档，一般根据"YEAR/MONTH"的目录结构存放（content/2013/07)；output目录存放pelican的生成结果；develop_server.sh是一个bash脚本,用于控制本地测试web服务器的启动和自动监视进程；pelicanconf.py是网站的配置文件，另外还有一个配置文件publishconf.py，前者一般用于本地测试，后者一般用于网站发布。&lt;/p&gt;
&lt;p&gt;Makefile中包含了接下来Pelican支持的操作，里面包含了手动和自动生成站点页面的几个命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make html         &lt;span class="c"&gt;#生成整个网站的内容&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;make regenerate   &lt;span class="c"&gt;#对上次生成后Modified部分生成（增量）&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;make serve        &lt;span class="c"&gt;#启动一个Web服务器，可在本机测试生成的站点&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver    &lt;span class="c"&gt;#生成一个Web服务器，并且自动监视修改，增量生成&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;make rsync_upload &lt;span class="c"&gt;#将网站内容上传到服务器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用Markdown撰写博客文章&lt;/h2&gt;
&lt;p&gt;Markdown是一种轻量级的标记语言，“易读易写”是它的特点，相比较于HTML，Markdown的标记更加简洁，输入更方便，对阅读的影响更小。Markdown是基于文本格式的，可以用任何文字编辑器打开。学习曲线也非常平缓，是一种让作者把注意力集中在写作上的语言。这里推荐使用&lt;a href="http://mouapp.com"&gt;Mou&lt;/a&gt;编写markdown文档。&lt;/p&gt;
&lt;p&gt;Pelican要求博客文章的Markdown文件必须有metadata，格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; 
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tony&lt;/span&gt; &lt;span class="n"&gt;Zhou&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;博客定制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;换一个不错的主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Responsive theme是一种比较友好的主题，它能产生对设备自适应的版式，用移动设备访问网站同样有完美的阅读效果。我发现有个台湾女程序员开发的fresh主题不错，也是一个responsive theme，因此决定采用这个主题。&lt;/p&gt;
&lt;p&gt;更换主题，只需要在配置文件中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; #the path of the theme directory# &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;定制博客的menu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pelican默认的网站navigation bar（以下称之为menu）的items是文章的Categories， 这可能不是我们想要的，一般情况下，我们需要这么几个navigation items: blog(博客主页的链接)、Archives（博客文章的列表）、About（作者的自我介绍）... 因此我们需要在配置文件中作如下几个配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;USE_FOLDER_AS_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;HIDE_CATEGORIES_FROM_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#YOUR_SITE_URL#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Archives&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#YOUR_SITE_URL#/archives.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;About&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#YOUR_SITE_URL#/about.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;定制博客的URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;博客的URL，需要特别定制，我希望博客文章采用以下的URL：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;}/{slug}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;YEAR_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MONTH_ARCHIVE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;posts/{date:%Y}/{date:%m}/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里面用到了slug，每篇博客文章都有自己的meta data，slug在meta data中配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加上评论功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disqus是一个在线评论系统，可以为网站提供评论托管服务，集成disqus非常简单：只要在静态页面上放disqus的js源代码。 pelican的主题已经内置了对disqus的支持，我们只要在配置文件中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;YOUR_DISQUS_SITENAME&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更多参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com"&gt;pelican&lt;/a&gt;官方网站&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; in pypi&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://jsliang.com/blog/2013/02/moving-to-pelican-hosting-on-github-pages.html"&gt;jsliang&lt;/a&gt;'s blog about pelican&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="publishing"></category><category term="python"></category></entry></feed>